# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Test CICD

on:
  push:
    branches: ['test']

permissions:
  checks: write
  contents: write
  pull-requests: write
  deployments: write

env:
  REDIS_PORT: demo
  REDIS_HOST: demo
  RABBITMQ_URL: demo
  BOT_TELEGRAM_TOKEN: demo
  BOT_TELEGRAM_CHAT_ID: demo
  MONGODB_URL: demo

jobs:
  check_commit_change:
    runs-on: ubuntu-22.04
    outputs:
      client_changed: ${{ steps.client_changed.outputs.client }}
      server_changed: ${{ steps.server_changed.outputs.server }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for client changes
        id: client_changed
        uses: dorny/paths-filter@v3
        with:
          filters: |
            client:
              - 'client/**'

      - name: Check for server changes
        id: server_changed
        uses: dorny/paths-filter@v3
        with:
          filters: |
            server:
              - 'server/**'

  client_test:
    runs-on: ubuntu-22.04
    needs: check_commit_change
    if: ${{ needs.check_commit_change.outputs.client_changed == 'true'}}
    defaults:
      run:
        working-directory: ./client/
    strategy:
      matrix:
        node-version: ['18.18.2']

    steps:
      - name: Checkout code from GitHub
        uses: actions/checkout@v4

      - name: Create serviceAccount.json
        run: |
          echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}" | base64 -d > serviceAccount.json

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Cache pnpm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: pnpm-store-${{ matrix.node-version }}-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-store-${{ matrix.node-version }}-

      - name: Install dependencies
        run: pnpm install

      - name: Run test
        run: pnpm test

  check_version:
    runs-on: ubuntu-22.04
    needs: check_commit_change
    if: ${{ needs.check_commit_change.outputs.server_changed == 'true'}}
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - uses: actions/checkout@v3

      - name: Get version
        id: get-version
        run: |
          VERSION=$(jq -r ".version" ./server/package.json)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  server_test:
    runs-on: ubuntu-22.04
    needs: check_version
    defaults:
      run:
        working-directory: ./server/

    strategy:
      matrix:
        node-version: ['18.18.2']

    steps:
      - name: Checkout code from GitHub
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Cache pnpm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: pnpm-store-${{ matrix.node-version }}-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-store-${{ matrix.node-version }}-

      - name: Install dependencies
        run: pnpm install

      - name: Run test
        run: pnpm test:all

  build_and_push_image:
    runs-on: ubuntu-22.04
    needs: [server_test, check_version]
    defaults:
      run:
        working-directory: server
    steps:
      - uses: actions/checkout@v3
      # - name: Login to Docker Hub
      #   uses: docker/login-action@v2
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # - name: Build image
      #   id: build
      #   run: |
      #     VERSION=${{ needs.check_version.outputs.version }} \
      #     DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }} \
      #     docker compose -f docker-compose.build.yml build

      # - name: Push image
      #   id: push
      #   run: |
      #     VERSION=${{ needs.check_version.outputs.version }} \
      #     DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }} \
      #     docker compose -f docker-compose.build.yml push

      - name: Save compose file to next job
        uses: actions/upload-artifact@v4
        with:
          name: artifact-vnoi
          path: ./server/docker-compose.prod.yml

  staging_server:
    runs-on: ubuntu-22.04
    needs: [build_and_push_image, check_version]
    outputs:
      external_ip: ${{ steps.compute-ssh.outputs.stdout }}
    env:
      PROJECT_ID: astute-office-426802-m1
      ZONE: asia-southeast1-a
      INSTANCE_NAME: server-1
      VERSION: ${{ needs.check_version.outputs.version }}
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Login to Google Cloud
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}

      - name: Get docker-compose file
        uses: actions/download-artifact@v4
        with:
          name: artifact-vnoi
          path: ./server/

      - name: Copy file to GCE instance
        run: |
          gcloud compute scp ./server/docker-compose.prod.yml ${{ env.INSTANCE_NAME }}:/vnoi-microservice/docker-compose.prod.yml --zone=${{ env.ZONE }} --project=${{ env.PROJECT_ID }}

      - name: SSH to staging server
        id: compute-ssh
        uses: google-github-actions/ssh-compute@v1
        with:
          user: ho.pl
          instance_name: ${{ env.INSTANCE_NAME }}
          project_id: ${{ env.PROJECT_ID }}
          zone: ${{ env.ZONE }}
          ssh_private_key: ${{ secrets.GCP_SSH_PRIVATE_KEY }}
          command: |
            echo "Start pulling images ${{ env.VERSION }}"
            VERSION=${{ env.VERSION }} DOCKERHUB_USERNAME=${{ env.DOCKERHUB_USERNAME }} \
            docker compose -f /vnoi-microservice/docker-compose.prod.yml pull
            echo "Finish pulling images ${{ env.VERSION }}"

            echo "Start deploy compose ${{ env.VERSION }}"
            VERSION=${{ env.VERSION }} DOCKERHUB_USERNAME=${{ env.DOCKERHUB_USERNAME }} \
            docker compose -f /vnoi-microservice/docker-compose.prod.yml up -d
            echo "Finish deploy compose ${{ env.VERSION }}"

      - name: Get external IP
        run: |
          gcloud compute instances describe ${{ env.INSTANCE_NAME }} --zone=${{ env.ZONE }} --project=${{ env.PROJECT_ID }} --format='value(networkInterfaces[0].accessConfigs[0].natIP)' > external_ip.txt
          cat external_ip.txt
        id: get_external_ip

  preview_client:
    runs-on: ubuntu-22.04
    needs: [client_test, staging_server]
    defaults:
      run:
        working-directory: ./client/
    permissions:
      contents: read
      deployments: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create serviceAccount.json
        run: |
          echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}" | base64 -d > serviceAccount.json

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Cache pnpm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: pnpm-store-${{ matrix.node-version }}-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-store-${{ matrix.node-version }}-

      - name: Install dependencies
        run: pnpm install

      - name: Build client
        run: pnpm build

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/pages-action@v1.5.0
        id: deployClient
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          projectName: vnoi-client
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          workingDirectory: ./client/
          directory: ./dist
          wranglerVersion: '3'

      - name: Get preview URL
        run: |
          echo "PREVIEW_URL=${{ steps.deployClient.outputs.url }}" >> $GITHUB_ENV
          cat ${{ env.PREVIEW_URL }}
          echo "Preview URL: ${{ steps.deployClient.outputs.environment }}" > $GITHUB_ENV
          cat ${{ env.environment }}
          cat ${{ steps.staging_server.outputs.external_ip }}
