# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Test CICD

on:
  push:
    branches: ['test']

permissions:
  checks: write
  contents: write
  pull-requests: write
  deployments: write

env:
  REDIS_PORT: demo
  REDIS_HOST: demo
  RABBITMQ_URL: demo
  BOT_TELEGRAM_TOKEN: demo
  BOT_TELEGRAM_CHAT_ID: demo
  MONGODB_URL: demo

jobs:
  build_and_push_image:
    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: server
    steps:
      - uses: actions/checkout@v3
      # - name: Login to Docker Hub
      #   uses: docker/login-action@v2
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # - name: Build image
      #   id: build
      #   run: |
      #     VERSION=${{ needs.check_version.outputs.version }} \
      #     DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }} \
      #     docker compose -f docker-compose.build.yml build

      # - name: Push image
      #   id: push
      #   run: |
      #     VERSION=${{ needs.check_version.outputs.version }} \
      #     DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }} \
      #     docker compose -f docker-compose.build.yml push

      - name: Save compose file to next job
        uses: actions/upload-artifact@v4
        with:
          name: artifact-vnoi
          path: ./server/docker-compose.prod.yml

  deploy_production:
    runs-on: ubuntu-22.04
    needs: [build_and_push_image]
    outputs:
      external_ip: ${{ steps.get_external_ip.outputs.external_ip }}
      server_production_status: ${{ steps.compute-ssh.outcome }}
    env:
      PROJECT_ID: astute-office-426802-m1
      ZONE: asia-southeast1-a
      INSTANCE_NAME: server-2
      VERSION: '0.0.1'
      DOCKERHUB_USERNAME: 'lehodev'
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Login to Google Cloud
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}

      - name: Get docker-compose file
        uses: actions/download-artifact@v4
        with:
          name: artifact-vnoi
          path: ./server/

      - name: Copy file to GCE instance
        run: |
          gcloud compute scp ./server/docker-compose.prod.yml ${{ env.INSTANCE_NAME }}:/vnoi-microservice/docker-compose.prod.yml --zone=${{ env.ZONE }} --project=${{ env.PROJECT_ID }}

      - name: SSH to production server
        id: compute-ssh
        uses: google-github-actions/ssh-compute@v1
        with:
          user: ho.pl
          instance_name: ${{ env.INSTANCE_NAME }}
          project_id: ${{ env.PROJECT_ID }}
          zone: ${{ env.ZONE }}
          ssh_private_key: ${{ secrets.GCP_SSH_PRIVATE_KEY }}
          command: |
            echo "Start pulling images ${{ env.VERSION }}"
            VERSION=${{ env.VERSION }} DOCKERHUB_USERNAME=${{ env.DOCKERHUB_USERNAME }} \
            docker compose -f /vnoi-microservice/docker-compose.prod.yml pull
            echo "Finish pulling images ${{ env.VERSION }}"

            echo "Start deploy compose ${{ env.VERSION }}"
            VERSION=${{ env.VERSION }} DOCKERHUB_USERNAME=${{ env.DOCKERHUB_USERNAME }} \
            docker compose -f /vnoi-microservice/docker-compose.prod.yml up -d
            echo "Finish deploy compose ${{ env.VERSION }}"

      - name: Get external IP
        id: get_external_ip
        run: |
          EXTERNAL_IP=$(gcloud compute instances describe ${{ env.INSTANCE_NAME }} --zone=${{ env.ZONE }} --project=${{ env.PROJECT_ID }} --format='value(networkInterfaces[0].accessConfigs[0].natIP)')
          echo "external_ip=$EXTERNAL_IP" >> $GITHUB_OUTPUT
