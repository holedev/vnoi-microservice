services:
  client:
    container_name: vnoi-client
    build:
      context: .
      dockerfile: client/Dockerfile
    ports:
      - 5173:80
    restart: on-failure
    depends_on:
      - gateway
    networks:
      - vnoi-network

  gateway:
    container_name: server-gateway
    build:
      context: .
      dockerfile: ./server/gateway/Dockerfile
    ports:
      - '9000:9000'
    restart: on-failure
    env_file:
      - ./Docker/env/server/.env
      - ./Docker/env/server/gateway/.env
    depends_on:
      amqp-rabbitmq:
        condition: service_healthy
      db-mongo:
        condition: service_healthy
    networks:
      - vnoi-network
      - vnoi-backend

  common:
    container_name: server-common
    build:
      context: .
      dockerfile: ./server/common/Dockerfile
    restart: on-failure
    env_file:
      - ./Docker/env/server/.env
      - ./Docker/env/server/common/.env
    depends_on:
      amqp-rabbitmq:
        condition: service_healthy
      db-mongo:
        condition: service_healthy
    networks:
      - vnoi-backend

  user:
    container_name: server-user
    build:
      context: .
      dockerfile: ./server/user/Dockerfile
    restart: on-failure
    env_file:
      - ./Docker/env/server/.env
      - ./Docker/env/server/user/.env
    depends_on:
      amqp-rabbitmq:
        condition: service_healthy
      db-mongo:
        condition: service_healthy
    networks:
      - vnoi-backend

  exercise:
    container_name: server-exercise
    build:
      context: .
      dockerfile: ./server/exercise/Dockerfile
    restart: on-failure
    env_file:
      - ./Docker/env/server/.env
      - ./Docker/env/server/exercise/.env
    depends_on:
      amqp-rabbitmq:
        condition: service_healthy
      db-mongo:
        condition: service_healthy
    networks:
      - vnoi-backend
      - vnoi-judge0

  media:
    container_name: server-media
    build:
      context: .
      dockerfile: ./server/media/Dockerfile
    restart: on-failure
    env_file:
      - ./Docker/env/server/.env
      - ./Docker/env/server/media/.env
    depends_on:
      amqp-rabbitmq:
        condition: service_healthy
      db-mongo:
        condition: service_healthy
    networks:
      - vnoi-backend

  learning:
    container_name: server-learning
    build:
      context: .
      dockerfile: ./server/learning/Dockerfile
    restart: on-failure
    env_file:
      - ./Docker/env/server/.env
      - ./Docker/env/server/learning/.env
    depends_on:
      amqp-rabbitmq:
        condition: service_healthy
      db-mongo:
        condition: service_healthy
    networks:
      - vnoi-backend

  statistics:
    container_name: server-statistics
    build:
      context: .
      dockerfile: ./server/statistics/Dockerfile
    restart: on-failure
    env_file:
      - ./Docker/env/server/.env
      - ./Docker/env/server/statistics/.env
    depends_on:
      amqp-rabbitmq:
        condition: service_healthy
      db-mongo:
        condition: service_healthy
    networks:
      - vnoi-backend

  logging:
    container_name: server-logging
    build:
      context: .
      dockerfile: ./server/logging/Dockerfile
    restart: on-failure
    env_file:
      - ./Docker/env/server/.env
      - ./Docker/env/server/logging/.env
    depends_on:
      amqp-rabbitmq:
        condition: service_healthy
      db-mongo:
        condition: service_healthy
    networks:
      - vnoi-backend

  db-mongo:
    container_name: db-mongo
    image: mongo
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 20s
    volumes:
      - db-mongo-data:/data/db
    networks:
      - vnoi-backend

  amqp-rabbitmq:
    container_name: amqp-rabbitmq
    image: rabbitmq:3.12-management
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 20s
    volumes:
      - db-rabbitmq-data:/var/lib/rabbitmq
    networks:
      - vnoi-backend

volumes:
  db-mongo-data:
    name: 'vnoi-mongo'
    driver: local
    driver_opts:
      type: none
      o: bind
      device: D:/DATA/vnoi-microservice/mongodb-data
  db-rabbitmq-data:
    name: 'vnoi-rabbitmq'
    driver: local
    driver_opts:
      type: none
      o: bind
      device: D:/DATA/vnoi-microservice/rabbitmq-data

networks:
  vnoi-network:
    name: vnoi-network
    driver: bridge
  vnoi-backend:
    name: vnoi-backend
    driver: bridge
  vnoi-judge0:
    driver: overlay
    external: true
